CREATE OR REPLACE TRIGGER ROUTE_NUM_DAYS_ADD
AFTER INSERT ON ROUTE_DAY
REFERENCING NEW AS nuevo
FOR EACH ROW
DECLARE
pragma autonomous_transaction;
BEGIN
  UPDATE ROUTE SET NUM_DAYS = NUM_DAYS + 1 WHERE ROUTE.X_ROUTE = :nuevo.ROUTE_X_ROUTE;
  COMMIT;
END;


CREATE OR REPLACE TRIGGER ROUTE_NUM_DAYS_DELETE
AFTER DELETE ON ROUTE_DAY
REFERENCING OLD AS viejo
FOR EACH ROW
DECLARE
pragma autonomous_transaction;
BEGIN
  UPDATE ROUTE SET NUM_DAYS = NUM_DAYS - 1 WHERE ROUTE.X_ROUTE = :viejo.ROUTE_X_ROUTE;
  COMMIT;
END;


CREATE OR REPLACE TRIGGER ROUTE_DERIVED_TIME
AFTER INSERT OR DELETE OR UPDATE OF TRAVEL_TIME ON STAY
BEGIN
  UPDATE ROUTE SET TIME = (SELECT SUM(TRAVEL_TIME) FROM STAY WHERE STAY.ROUTE_X_ROUTE = ROUTE.X_ROUTE);
END;

CREATE OR REPLACE TRIGGER ROUTE_DERIVED_DISTANCE
AFTER INSERT OR DELETE OR UPDATE OF TRAVEL_DISTANCE ON STAY
BEGIN
  UPDATE ROUTE SET DISTANCE = (SELECT SUM(TRAVEL_DISTANCE) FROM STAY WHERE STAY.ROUTE_X_ROUTE = ROUTE.X_ROUTE);
END;

CREATE OR REPLACE TRIGGER ROUTE_DERIVED_NUMPLACES
AFTER INSERT OR DELETE ON STAY
BEGIN
  UPDATE ROUTE SET NUM_PLACES = (SELECT COUNT(*) FROM STAY WHERE STAY.ROUTE_X_ROUTE = ROUTE.X_ROUTE);
END;




BEGIN
FOR route2 IN (SELECT X_ROUTE FROM ETRAVEL.ROUTE WHERE START_DATE is not null AND START_DATE < (SELECT SYSDATE FROM DUAL) AND STATE is not null AND STATE = 'PENDING') loop 
UPDATE ETRAVEL.ROUTE SET ETRAVEL.ROUTE.STATE = 'IN_PROGRESS' WHERE ETRAVEL.ROUTE.X_ROUTE = route2.X_ROUTE;
END loop;
COMMIT;
FOR route1 IN (SELECT X_ROUTE FROM ETRAVEL.ROUTE WHERE END_DATE is not null AND END_DATE < (SELECT SYSDATE FROM DUAL) AND STATE is not null AND STATE = 'IN_PROGRESS') loop 
UPDATE ETRAVEL.ROUTE SET ETRAVEL.ROUTE.STATE = 'COMPLETED' WHERE ETRAVEL.ROUTE.X_ROUTE = route1.X_ROUTE;
END loop;
COMMIT;
END;



BEGIN
    DBMS_SCHEDULER.CREATE_JOB (
            job_name => '"ETRAVEL"."UPDATE_ROUTE_STATE_JOB"',
            schedule_name => '"ETRAVEL"."UPDATE_ROUTE_STATE_SCHEDULE"',
            job_type => 'PLSQL_BLOCK',
            job_action => 'BEGIN
FOR route2 IN (SELECT X_ROUTE FROM ETRAVEL.ROUTE WHERE START_DATE is not null AND START_DATE < (SELECT SYSDATE FROM DUAL) AND STATE is not null AND STATE = ''PENDING'') loop 
UPDATE ETRAVEL.ROUTE SET ETRAVEL.ROUTE.STATE = ''IN_PROGRESS'' WHERE ETRAVEL.ROUTE.X_ROUTE = route2.X_ROUTE;
END loop;
COMMIT;
FOR route1 IN (SELECT X_ROUTE FROM ETRAVEL.ROUTE WHERE END_DATE is not null AND END_DATE < (SELECT SYSDATE FROM DUAL) AND STATE is not null AND STATE = ''IN_PROGRESS'') loop 
UPDATE ETRAVEL.ROUTE SET ETRAVEL.ROUTE.STATE = ''COMPLETED'' WHERE ETRAVEL.ROUTE.X_ROUTE = route1.X_ROUTE;
END loop;
COMMIT;
END;',
            number_of_arguments => 0,
            enabled => FALSE,
            auto_drop => FALSE,
               
            comments => 'Updatear el estado de la ruta en función de su día de inicio y fin');

         
     
 
    DBMS_SCHEDULER.SET_ATTRIBUTE( 
             name => '"ETRAVEL"."UPDATE_ROUTE_STATE_JOB"', 
             attribute => 'logging_level', value => DBMS_SCHEDULER.LOGGING_OFF);
      
  
    
    DBMS_SCHEDULER.enable(
             name => '"ETRAVEL"."UPDATE_ROUTE_STATE_JOB"');
END;